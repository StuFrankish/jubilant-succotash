@{
    ViewData["Title"] = "Home Page";
}

<link href="~/css/markdowneditor.min.css" rel="stylesheet" />


<div id="menuModal" class="modal custom-modal-menu">
    <div class="list-group">
        <a class="list-group-item list-group-item-action text-muted" href="#"><i class="fa-solid fa-hammer fa-fw"></i>Tool</a>
        <a class="list-group-item list-group-item-action text-muted" href="#"><i class="fa-solid fa-hammer fa-fw"></i>Another Tool</a>
        <a class="list-group-item list-group-item-action text-muted" href="#"><i class="fa-solid fa-hammer fa-fw"></i>Some Other Tool</a>
        <a class="list-group-item list-group-item-action text-muted" href="#"><i class="fa-solid fa-hammer fa-fw"></i>That Tool</a>
        <a class="list-group-item list-group-item-action text-muted" href="#"><i class="fa-solid fa-hammer fa-fw"></i>This Tool</a>
    </div>
</div>

<div class="markdown-editor">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active"
               id="write-tab"
               data-bs-toggle="tab"
               href="#write"
               role="tab"
               aria-controls="write"
               aria-selected="true">Write</a>
        </li>
        <li class="nav-item">
            <a class="nav-link"
               id="preview-tab"
               data-bs-toggle="tab"
               href="#preview"
               role="tab"
               aria-controls="preview"
               aria-selected="false">Preview</a>
        </li>
        <li class="nav-item flex-grow-1">

            <div class="icon-buttons float-end">

                <!-- Icon-only buttons -->
                <a class="btn btn-light btn-sm" data-command="heading" title="Heading">
                    <i class="fa-solid fa-heading"></i>
                </a>
                <a class="btn btn-light btn-sm" data-command="bold" title="Bold">
                    <i class="fa-solid fa-bold"></i>
                </a>
                <a class="btn btn-light btn-sm" data-command="italic" title="Italic">
                    <i class="fa-solid fa-italic"></i>
                </a>
                <div class="separator"></div>
                <a class="btn btn-light btn-sm" data-command="link" title="Link">
                    <i class="fa-solid fa-link"></i>
                </a>
                <a class="btn btn-light btn-sm" data-command="mention" title="Mention">
                    <i class="fa-regular fa-circle-user"></i>
                </a>
                <div class="separator"></div>
                <a class="btn btn-light btn-sm" id="modalButton" title="Tools">
                    <i class="fa-solid fa-screwdriver-wrench"></i>
                </a>
                <!-- Add more buttons as needed -->
            </div>

        </li>
    </ul>

    <!-- Tab panes -->
    <div class="editor-content">
        <div class="tab-content">
            <div class="tab-pane show active"
                 id="write"
                 role="tabpanel"
                 aria-labelledby="write-tab">
                <textarea class="editor-textarea" placeholder="Use Markdown to format your comment"></textarea>
            </div>
            <div class="tab-pane"
                 id="preview"
                 role="tabpanel"
                 aria-labelledby="preview-tab">
                <div class="editor-preview"></div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function() {

        var editorHeight = document.querySelector('.markdown-editor').offsetHeight;

        const textarea = document.querySelector('.editor-textarea');
        const preview = document.querySelector('.editor-preview');
        const editorButtons = document.querySelectorAll('[data-command]');

        // Handle tab change event
        $('a[data-bs-toggle="tab"]').on('shown.bs.tab', function(e) {
            if (e.target.id === 'preview-tab') {

                // Hide the icon buttons when using preview mode
                $(editorButtons).parent().hide();

                editorHeight = document.querySelector('.markdown-editor').offsetHeight;
                document.querySelector('.markdown-editor').removeAttribute('style');
                document.querySelector('.markdown-editor').setAttribute('style', 'resize: unset;');


                // Simple markdown to HTML conversion
                let markdownText = textarea.value;
                // Replace **text** with bold
                markdownText = markdownText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                // Replace *text* with italics
                markdownText = markdownText.replace(/\*(.*?)\*/g, '<em>$1</em>');
                // Replace # Header with h1
                markdownText = markdownText.replace(/^# (.*$)/gim, '<h1>$1</h1>');
                // Replace ## Header with h2
                markdownText = markdownText.replace(/^## (.*$)/gim, '<h2>$1</h2>');
                // Replace ### Header with h3
                markdownText = markdownText.replace(/^### (.*$)/gim, '<h3>$1</h3>');
                // Replace > quote with blockquote
                markdownText = markdownText.replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>');
                // Replace line breaks
                markdownText = markdownText.replace(/\n/g, '<br>');
                preview.innerHTML = markdownText;

                // If the markdown text is empty, replace the contents with a placeholder "nothing to preview"
                if (markdownText === '') {
                    preview.innerHTML = 'Nothing to preview';
                }
            }
            else {
                // Show the icon buttons when using edit mode
                $(editorButtons).parent().show();

                let editor = document.querySelector('.markdown-editor');
                $(editor).css('height', editorHeight + 'px');
                $(editor).css('resize', 'vertical');
            }
        });

        editorButtons.forEach((button) => {
            button.addEventListener('click', () => {
                const command = button.getAttribute('data-command');
                const start = textarea.selectionStart;
                const end = textarea.selectionEnd;
                const selectedText = textarea.value.substring(start, end);
                let replacement = selectedText;

                if (command === 'bold') {
                    replacement = `**${selectedText}**`;
                } else if (command === 'italic') {
                    replacement = `*${selectedText}*`;
                } else if (command === 'heading') {
                    replacement = `### ${selectedText}`;
                }

                textarea.setRangeText(replacement, start, end, 'end');
                textarea.focus();
            });
        });
    });

    document.getElementById('modalButton').addEventListener('click', function(e) {
        const modal = document.getElementById('menuModal');
        const buttonRect = document.getElementById('modalButton').getBoundingClientRect();

        // Toggle the display of the modal
        modal.style.display = modal.style.display === 'block' ? 'none' : 'block';
        const modalWidth = modal.getBoundingClientRect().width;

        // Position the modal to the left of the button
        modal.style.top = `${buttonRect.bottom}px`;
        modal.style.left = `${buttonRect.right - modalWidth}px`;
    });

    // Close modal if user clicks outside of it
    document.addEventListener('click', function(e) {
        const modal = document.getElementById('menuModal');
        const button = document.getElementById('modalButton');

        // Hide the modal if click happens outside the modal or button
        if (!button.contains(e.target) && !modal.contains(e.target)) {
            modal.style.display = 'none';
        }
    });

</script>
